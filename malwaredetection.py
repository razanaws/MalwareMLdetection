# -*- coding: utf-8 -*-
"""MalwareDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UcwO4jyDA8ru25W8RQkZmzP5o-mMwzOo
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, ExtraTreesClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.naive_bayes import GaussianNB

data = pd.read_csv('uci_malware_detection (1).csv') #Read Dataset
data.head()

data.isnull().sum() #check for NaN

sns.countplot(x='Label', data=data); #Visualize data into malicious/non-malicious

X = data.drop(["Label"],axis=1) # All features
y = data['Label'].values # Malicious/Non malicious

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=10) #changable but not 20%testing 80%training

models = [RandomForestClassifier,
          DecisionTreeClassifier,
          KNeighborsClassifier,
          AdaBoostClassifier,
          SGDClassifier,
         ExtraTreesClassifier,
          GaussianNB]
accuracy_test=[]
model = []
for m in models:
    model_name = type(m()).__name__
    print('######-Model =>\033[07m {} \033[0m'.format(type(m()).__name__))
    model_ = m()
    model_.fit(X_train, y_train)
    pred = model_.predict(X_test)
    acc = accuracy_score(pred, y_test)
    accuracy_test.append(acc)
    model.append(model_name)
    print('Test Accuracy :\033[32m \033[01m {:.5f}% \033[30m \033[0m'.format(acc*100))
    print('\033[01m              Classification_report \033[0m')
    print(classification_report(y_test, pred))
    print('\033[01m             Confusion_matrix \033[0m')
    cf_matrix = confusion_matrix(y_test, pred)
    plot_ = sns.heatmap(cf_matrix/np.sum(cf_matrix), annot=True,fmt= '0.2%')
    plt.show()
    print('\033[31m###################- End -###################\033[0m')

model = pd.Series(model, name='Model').astype(str)
accuracy = pd.Series(accuracy_test, name='Accuracy')
output = pd.concat([model, accuracy], axis=1)

output

plt.figure(figsize=(12, 7))
plots = sns.barplot(x='Model', y='Accuracy', data=output)
for bar in plots.patches:
    plots.annotate(format(bar.get_height(), '.2f'),
                   (bar.get_x() + bar.get_width() / 2,
                    bar.get_height()), ha='center', va='center',
                   size=15, xytext=(0, 8),
                   textcoords='offset points')

plt.xlabel("Models")
plt.ylabel("Accuracy")
plt.xticks(rotation=20);